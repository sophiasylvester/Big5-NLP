{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Histograms of the Big Five Traits in the entire dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from pathlib import Path\n",
    "import random\n",
    "random.seed(32)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 1568 entries, -Areopagan- to zyzee\n",
      "Data columns (total 15 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   agreeableness      1568 non-null   float32\n",
      " 1   openness           1568 non-null   float32\n",
      " 2   conscientiousness  1568 non-null   float32\n",
      " 3   extraversion       1568 non-null   float32\n",
      " 4   neuroticism        1568 non-null   float32\n",
      " 5   big5_a             1568 non-null   int16  \n",
      " 6   big5_o             1568 non-null   int16  \n",
      " 7   big5_c             1568 non-null   int16  \n",
      " 8   big5_e             1568 non-null   int16  \n",
      " 9   big5_n             1568 non-null   int16  \n",
      " 10  big5_a_multi       1568 non-null   int16  \n",
      " 11  big5_o_multi       1568 non-null   int16  \n",
      " 12  big5_c_multi       1568 non-null   int16  \n",
      " 13  big5_e_multi       1568 non-null   int16  \n",
      " 14  big5_n_multi       1568 non-null   int16  \n",
      "dtypes: float32(5), int16(10)\n",
      "memory usage: 73.5+ KB\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 1568 entries, -Areopagan- to zyzee\n",
      "Columns: 21377 entries, ('post', 'score') to ('lda100', 99)\n",
      "dtypes: float32(102), float64(5150), int16(16125)\n",
      "memory usage: 110.5+ MB\n"
     ]
    }
   ],
   "source": [
    "# read in normal dataset\n",
    "df = pd.read_pickle(\"/home/sophia/ma_py/Big5-NLP/b5feat.pkl\")\n",
    "df.name = 'allfeatures_df'\n",
    "df = df[df['trait', 'openness'].notna()]\n",
    "df = df[df['trait', 'conscientiousness'].notna()]\n",
    "df = df[df['trait', 'extraversion'].notna()]\n",
    "df = df[df['trait', 'agreeableness'].notna()]\n",
    "df = df[df['trait', 'neuroticism'].notna()]\n",
    "df.name = 'allfeatures_df'\n",
    "df.trait.info()\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Histogram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x1152 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def all_hist_true(df):\n",
    "    p = Path('/home/sophia/ma_py/Big5-NLP/results/')\n",
    "    plt.figure(figsize = (16, 16))\n",
    "#     plt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)\n",
    "    plt.subplot(3, 2, 1)\n",
    "    plt.hist(df['trait', 'openness'], bins = 20)\n",
    "    plt.title('Agreeableness')\n",
    "    \n",
    "    plt.subplot(3, 2, 2)\n",
    "    plt.hist(df['trait', 'conscientiousness'], bins = 20)\n",
    "    plt.title('Openness')\n",
    "    \n",
    "    plt.subplot(3, 2, 3)\n",
    "    plt.hist(df['trait', 'extraversion'], bins = 20)\n",
    "    plt.title('Conscientiousness')\n",
    "    \n",
    "    plt.subplot(3, 2, 4)\n",
    "    plt.hist(df['trait', 'agreeableness'], bins = 20)\n",
    "    plt.title('Extraversion')\n",
    "    \n",
    "    plt.subplot(3, 2, 5)\n",
    "    plt.hist(df['trait', 'neuroticism'], bins = 20)\n",
    "    plt.title('Neuroticism')\n",
    "    \n",
    "    plt.suptitle(\"Histograms of the true trait values\")\n",
    "    plt.subplots_adjust(left=0.1, \n",
    "                    bottom=0.1,  \n",
    "                    right=0.9,  \n",
    "                    top=0.9,  \n",
    "                    wspace=0.4,  \n",
    "                    hspace=0.4) \n",
    "    plt.savefig(Path(p, 'histogram_traits_plot.png'))\n",
    "    plt.show()\n",
    "\n",
    "all_hist_true(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Check imbalance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Distribution of the true trait values in the classes (in %):\n",
      "\n",
      "openness \n",
      "\tBinary:  [0.29017857 0.70982143] \n",
      "\t5 classes:  [0.12691327 0.10012755 0.17155612 0.22002551 0.38137755] \n",
      "\n",
      "conscientiousness \n",
      "\tBinary:  [0.62181122 0.37818878] \n",
      "\t5 classes:  [0.34885204 0.18686224 0.17219388 0.12117347 0.17091837] \n",
      "\n",
      "extraversion \n",
      "\tBinary:  [0.64987245 0.35012755] \n",
      "\t5 classes:  [0.40561224 0.1747449  0.16390306 0.10905612 0.14668367] \n",
      "\n",
      "agreeableness \n",
      "\tBinary:  [0.56505102 0.43494898] \n",
      "\t5 classes:  [0.33354592 0.16709184 0.17219388 0.15433673 0.17283163] \n",
      "\n",
      "neuroticism \n",
      "\tBinary:  [0.49553571 0.50446429] \n",
      "\t5 classes:  [0.26084184 0.14285714 0.17091837 0.14477041 0.28061224] \n",
      "\n"
     ]
    }
   ],
   "source": [
    "traits = ['openness', 'conscientiousness', 'extraversion', 'agreeableness', 'neuroticism']\n",
    "\n",
    "def check_imbalance(df, traits):\n",
    "    length = len(df)\n",
    "    o = df['trait', 'big5_o']\n",
    "    c = df['trait', 'big5_c']\n",
    "    e = df['trait', 'big5_e']\n",
    "    a = df['trait', 'big5_a']\n",
    "    n = df['trait', 'big5_n']\n",
    "    binarylst = [o, c, e, a, n]\n",
    "    o5 = df['trait', 'big5_o_multi']\n",
    "    c5 = df['trait', 'big5_c_multi']\n",
    "    e5 = df['trait', 'big5_e_multi']\n",
    "    a5 = df['trait', 'big5_a_multi']\n",
    "    n5 = df['trait', 'big5_n_multi']\n",
    "    multilst = [o5, c5, e5, a5, n5]\n",
    "    \n",
    "    result = []\n",
    "    for trait in binarylst: \n",
    "        result.append(np.bincount(trait) / length)\n",
    "    result5 = []\n",
    "    for trait in multilst:\n",
    "        result5.append(np.bincount(trait) / len(trait))\n",
    "    \n",
    "    print(\"Distribution of the true trait values in the classes (in %):\\n\")\n",
    "    for i in range(len(traits)):\n",
    "        print(traits[i], \"\\n\\tBinary: \", result[i], \"\\n\\t5 classes: \", result5[i], \"\\n\")\n",
    "\n",
    "    \n",
    "check_imbalance(df, traits)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": ".venv"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
